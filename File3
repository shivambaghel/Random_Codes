import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.util.JsonFormat;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class YourClassTest {

    @Test
    public void testToJson() throws IOException {
        // Mock the MessageOrBuilder
        MessageOrBuilder mockMessage = Mockito.mock(MessageOrBuilder.class);

        // Set up the expected result
        String expectedJson = "{\"field\": \"value\"}"; // Replace with your expected JSON

        // Mock the JsonFormat.printer().print() method
        JsonFormat.Printer mockPrinter = Mockito.mock(JsonFormat.Printer.class);
        Mockito.when(JsonFormat.printer()).thenReturn(mockPrinter);
        Mockito.when(mockPrinter.print(mockMessage)).thenReturn(expectedJson);

        // Call the method you want to test
        String actualJson = YourClass.toJson(mockMessage);

        // Verify if the JsonFormat.printer().print() method was called with the correct argument
        Mockito.verify(mockPrinter).print(mockMessage);

        // Check if the returned JSON matches the expected result
        assertEquals(expectedJson, actualJson);
    }
}







import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.util.JsonFormat;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class YourClassTest {

    @Test
    public void testToJson() throws IOException {
        // Mock the MessageOrBuilder
        MessageOrBuilder mockMessage = Mockito.mock(MessageOrBuilder.class);

        // Mock the JsonFormat.printer().print() method to throw an IOException
        JsonFormat.Printer mockPrinter = Mockito.mock(JsonFormat.Printer.class);
        Mockito.when(JsonFormat.printer()).thenReturn(mockPrinter);
        Mockito.when(mockPrinter.print(mockMessage)).thenThrow(new IOException());

        // Call the method you want to test
        IOException exception = assertThrows(IOException.class, () -> {
            YourClass.toJson(mockMessage);
        });

        // Verify if the JsonFormat.printer().print() method was called with the correct argument
        Mockito.verify(mockPrinter).print(mockMessage);

        // Check if the correct exception was thrown
        assertEquals("IOException occurred", exception.getMessage()); // Replace with your expected error message
    }
}
