import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.annotation.Bean;

import org.springframework.context.annotation.Configuration;

import org.springframework.core.env.Environment;

import org.springframework.jdbc.datasource.DriverManagerDataSource;

import org.springframework.orm.jpa.JpaTransactionManager;

import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;

import org.springframework.transaction.PlatformTransactionManager;

import javax.persistence.EntityManagerFactory;

import javax.sql.DataSource;

import java.util.Properties;

@Configuration

public class JpaConfig {

    @Autowired

    private Environment environment;

    @Bean

    public DataSource dataSource() {

        DriverManagerDataSource dataSource = new DriverManagerDataSource();

        dataSource.setDriverClassName(environment.getProperty("spring.datasource.driverClassName"));

        dataSource.setUrl(environment.getProperty("spring.datasource.url"));

        dataSource.setUsername(environment.getProperty("spring.dbdatasource.username"));

        dataSource.setPassword(environment.getProperty("spring.dbdatasource.password"));

        return dataSource;

    }

    @Bean

    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {

        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();

        em.setDataSource(dataSource());

        em.setPackagesToScan("com.example.entity"); // Replace with your entity package

        

        em.setJpaProperties(hibernateProperties());

        return em;

    }

    @Bean

    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {

        JpaTransactionManager transactionManager = new JpaTransactionManager();

        transactionManager.setEntityManagerFactory(entityManagerFactory);

        return transactionManager;

    }

    private Properties hibernateProperties() {

        Properties properties = new Properties();

        properties.setProperty("hibernate.dialect", environment.getProperty("spring.jpa.hibernate.dialect"));

        properties.setProperty("hibernate.show_sql", environment.getProperty("spring.jpa.show-sql"));

        properties.setProperty("hibernate.physical_naming_strategy",

                environment.getProperty("spring.jpa.hibernate.naming.physical-strategy"));

        properties.setProperty("hibernate.jdbc.batch_size",

                environment.getProperty("spring.jpa.properties.hibernate.jdbc.batch_size"));

        properties.setProperty("hibernate.order_inserts",

                environment.getProperty("spring.jpa.properties.hibernate.order_inserts"));

        properties.setProperty("hibernate.proc.param_null_passing",

                environment.getProperty("spring.jpa.properties.hibernate.proc.param_null_passing"));

        return properties;

    }

}







# Database
spring.jpa.show-sql=true
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
spring.datasource.url=jdbc:sqlserver://CSMIBDNADBDV48.nam.nsroot.net:2431;database=CRMDb;encrypt=false;trustServerCertificate=true
spring.dbdatasource.username=CRMDb usr
spring.dbdatasource.password=alKzdR5=

# CyberArk
cyberark.secret.mssqldb-ose=mssql_bcma_crmapi_crmdb

# Hibernate
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.jdbc.batch_size=200
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.proc.param_null_passing=true




